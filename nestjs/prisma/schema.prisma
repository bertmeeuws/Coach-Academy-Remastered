// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  /// @Validator.IsEmail()
  email         String
  password      String
  createdAt     DateTime        @default(now())
  role          String          @default("CLIENT")
  client        Client?
  coach         Coach?
  Notifications Notifications[]
  profile_image String?
}

model Client {
  id       Int        @id @default(autoincrement())
  user     User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId   Int        @unique
  surname  String
  name     String
  dob      DateTime?
  phone    String?
  address  String?
  number   Int?
  postal   Int?
  city     String?
  coach    Coach?     @relation(fields: [coachId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  coachId  Int?
  invite   Invite?    @relation(fields: [inviteId], references: [id])
  inviteId String?    @unique @db.Uuid
  Dietplan Dietplan[]
}

model Coach {
  id       Int        @id @default(autoincrement())
  user     User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId   Int        @unique
  surname  String
  name     String
  clients  Client[]
  Invite   Invite[]
  Dietplan Dietplan[]
}

model Invite {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coach       Coach     @relation(fields: [coachId], references: [id])
  coachId     Int
  createdAt   DateTime  @default(now())
  client      Client?
  invalidated DateTime?
}

enum NOTIFICATION_TYPE {
  NEW_MESSAGE
  INVITE_ACCEPTED
  NEW_DOCUMENT
  NEW_MEALPLAN
  NEW_DIETPLAN
}

model Notifications {
  id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      NOTIFICATION_TYPE
  user      User              @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime          @default(now())
  read      Boolean           @default(false)
  content   String?
}

enum MEAL_DAY {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Dietplan {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coach    Coach  @relation(fields: [coachId], references: [id])
  client   Client @relation(fields: [clientId], references: [id])
  coachId  Int
  clientId Int
  Meal     Meal[]
}

model Meal {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dietplan   Dietplan   @relation(fields: [dietplanId], references: [id])
  dietplanId String     @db.Uuid
  day        MEAL_DAY
  foods      FoodItem[]
}

model FoodItem {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount String
  Meal   Meal[]
  mealId String? @db.Uuid
  notes  String?
  food   Food    @relation(fields: [foodId], references: [id])
  foodId String  @db.Uuid
}

model Food {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  image    String
  amount   Int
  carbs    Int
  protein  Int
  fat      Int
  FoodItem FoodItem[]
}
