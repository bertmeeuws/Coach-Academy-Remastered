{"version":3,"file":"urql-exchange-multipart-fetch.min.js","sources":["../src/multipartFetchExchange.ts"],"sourcesContent":["import { filter, merge, mergeMap, pipe, share, takeUntil, onPush } from 'wonka';\nimport { extractFiles } from 'extract-files';\nimport { Exchange } from '@urql/core';\n\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '@urql/core/internal';\n\nexport const multipartFetchExchange: Exchange = ({\n  forward,\n  dispatchDebug,\n}) => ops$ => {\n  const sharedOps$ = share(ops$);\n  const fetchResults$ = pipe(\n    sharedOps$,\n    filter(operation => {\n      return operation.kind === 'query' || operation.kind === 'mutation';\n    }),\n    mergeMap(operation => {\n      const teardown$ = pipe(\n        sharedOps$,\n        filter(op => op.kind === 'teardown' && op.key === operation.key)\n      );\n\n      // Spreading operation.variables here in case someone made a variables with Object.create(null).\n      const { files, clone: variables } = extractFiles({\n        ...operation.variables,\n      });\n      const body = makeFetchBody({ query: operation.query, variables });\n\n      let url: string;\n      let fetchOptions: RequestInit;\n      if (files.size) {\n        url = makeFetchURL(operation);\n        fetchOptions = makeFetchOptions(operation);\n        if (fetchOptions.headers!['content-type'] === 'application/json') {\n          delete fetchOptions.headers!['content-type'];\n        }\n\n        fetchOptions.method = 'POST';\n        fetchOptions.body = new FormData();\n        fetchOptions.body.append('operations', JSON.stringify(body));\n\n        const map = {};\n        let i = 0;\n        files.forEach(paths => {\n          map[++i] = paths.map(path => `variables.${path}`);\n        });\n\n        fetchOptions.body.append('map', JSON.stringify(map));\n\n        i = 0;\n        files.forEach((_, file) => {\n          (fetchOptions.body as FormData).append(`${++i}`, file, file.name);\n        });\n      } else {\n        fetchOptions = makeFetchOptions(operation, body);\n        url = makeFetchURL(operation, body);\n      }\n\n      dispatchDebug({\n        type: 'fetchRequest',\n        message: 'A fetch request is being executed.',\n        operation,\n        data: {\n          url,\n          fetchOptions,\n        },\n      });\n\n      return pipe(\n        makeFetchSource(operation, url, fetchOptions),\n        takeUntil(teardown$),\n        onPush(result => {\n          const error = !result.data ? result.error : undefined;\n\n          dispatchDebug({\n            type: error ? 'fetchError' : 'fetchSuccess',\n            message: `A ${\n              error ? 'failed' : 'successful'\n            } fetch response has been returned.`,\n            operation,\n            data: {\n              url,\n              fetchOptions,\n              value: error || result,\n            },\n          });\n        })\n      );\n    })\n  );\n\n  const forward$ = pipe(\n    sharedOps$,\n    filter(operation => {\n      return operation.kind !== 'query' && operation.kind !== 'mutation';\n    }),\n    forward\n  );\n\n  return merge([fetchResults$, forward$]);\n};\n"],"names":["files","body","const","makeFetchOptions","fetchOptions","i","url","sharedOps$","kind"],"mappings":"iaAmCUA,6GAJEC,6BAANC,2FAOMC,+EAMJC,EAAaH,gFAIbD,WACQK,8EAMRL,EAAAC,8NApCFK,UAFFC,oEAAAA,OA+EFL,0CAQaM"}