var e = require("wonka");

var r = require("extract-files");

var t = require("@urql/core/internal");

function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = arguments[r];
      for (var n in t) {
        if (Object.prototype.hasOwnProperty.call(t, n)) {
          e[n] = t[n];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}

exports.multipartFetchExchange = function multipartFetchExchange(n) {
  var a = n.forward;
  var i = n.dispatchDebug;
  return function(n) {
    var o = e.share(n);
    var c = e.mergeMap((function(n) {
      var a = e.filter((function(e) {
        return "teardown" === e.kind && e.key === n.key;
      }))(o);
      var c = r.extractFiles(_extends({}, n.variables));
      var u = c.files;
      var s = t.makeFetchBody({
        query: n.query,
        variables: c.clone
      });
      var p;
      var f;
      if (u.size) {
        p = t.makeFetchURL(n);
        if ("application/json" === (f = t.makeFetchOptions(n)).headers["content-type"]) {
          delete f.headers["content-type"];
        }
        f.method = "POST";
        f.body = new FormData;
        f.body.append("operations", JSON.stringify(s));
        var h = {};
        var d = 0;
        u.forEach((function(e) {
          h[++d] = e.map((function(e) {
            return "variables." + e;
          }));
        }));
        f.body.append("map", JSON.stringify(h));
        d = 0;
        u.forEach((function(e, r) {
          f.body.append("" + ++d, r, r.name);
        }));
      } else {
        f = t.makeFetchOptions(n, s);
        p = t.makeFetchURL(n, s);
      }
      "production" !== process.env.NODE_ENV && i({
        type: "fetchRequest",
        message: "A fetch request is being executed.",
        operation: n,
        data: {
          url: p,
          fetchOptions: f
        },
        source: "multipartFetchExchange"
      });
      return e.onPush((function(e) {
        var r = !e.data ? e.error : void 0;
        "production" !== process.env.NODE_ENV && i({
          type: r ? "fetchError" : "fetchSuccess",
          message: "A " + (r ? "failed" : "successful") + " fetch response has been returned.",
          operation: n,
          data: {
            url: p,
            fetchOptions: f,
            value: r || e
          },
          source: "multipartFetchExchange"
        });
      }))(e.takeUntil(a)(t.makeFetchSource(n, p, f)));
    }))(e.filter((function(e) {
      return "query" === e.kind || "mutation" === e.kind;
    }))(o));
    var u = a(e.filter((function(e) {
      return "query" !== e.kind && "mutation" !== e.kind;
    }))(o));
    return e.merge([ c, u ]);
  };
};
//# sourceMappingURL=urql-exchange-multipart-fetch.js.map
